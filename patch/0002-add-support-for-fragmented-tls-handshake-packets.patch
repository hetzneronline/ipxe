From ca9f5fc5645c60c00c3ca232d2a492aa1eb29c58 Mon Sep 17 00:00:00 2001
From: Christopher Schenk <christopher@cschenk.net>
Date: Tue, 23 Jun 2020 17:24:36 +0200
Subject: [PATCH] [tls] Add support for fragmented tls handshake packets

---
 src/include/ipxe/tls.h |  5 ++++
 src/net/tls.c          | 55 +++++++++++++++++++++++++++++++++---------
 2 files changed, 49 insertions(+), 11 deletions(-)

diff --git a/src/include/ipxe/tls.h b/src/include/ipxe/tls.h
index febbdc5898..b4f41e8373 100644
--- a/src/include/ipxe/tls.h
+++ b/src/include/ipxe/tls.h
@@ -355,6 +355,11 @@ struct tls_connection {
 	struct io_buffer rx_header_iobuf;
 	/** List of received data buffers */
 	struct list_head rx_data;
+
+	/** Bytes remaining for current handshake record */
+	size_t handshake_fragment_remaining;
+	/** List of fragments of current handshake record */
+	struct list_head handshake_fragments;
 };
 
 /** RX I/O buffer size
diff --git a/src/net/tls.c b/src/net/tls.c
index ea827600f3..f811f016e7 100644
--- a/src/net/tls.c
+++ b/src/net/tls.c
@@ -1989,18 +1989,51 @@ static int tls_new_finished ( struct tls_connection *tls,
  */
 static int tls_new_handshake ( struct tls_connection *tls,
 			       const void *data, size_t len ) {
-	size_t remaining = len;
+	size_t remaining;
 	int rc;
+	struct io_buffer *iobuf;
+	uint8_t fragment_finished = 0;
+
+	iobuf = alloc_iob_raw ( len, TLS_RX_ALIGN, 0 );
+	memcpy ( iob_put ( iobuf, len ), data, len );
+
+	if ( tls->handshake_fragment_remaining ) {
+		list_add_tail ( &iobuf->list, &tls->handshake_fragments );
+		if ( tls->handshake_fragment_remaining > len)
+		{
+			tls->handshake_fragment_remaining -= len;
+			return 0;
+		}
+		else {
+			tls->handshake_fragment_remaining = 0;
+			fragment_finished = 1;
+			iobuf = iob_concatenate ( &tls->handshake_fragments );
+			len = iob_len ( iobuf );
+		}
+	}
+
+	remaining = len;
 
 	while ( remaining ) {
 		const struct {
 			uint8_t type;
 			tls24_t length;
 			uint8_t payload[0];
-		} __attribute__ (( packed )) *handshake = data;
+		} __attribute__ (( packed )) *handshake = iobuf->data;
 		const void *payload;
 		size_t payload_len;
 		size_t record_len;
+		size_t frag_len;
+
+		/* Check for fragmentation */
+		payload_len = tls_uint24 ( &handshake->length );
+		frag_len = ( len - sizeof ( *handshake ) );
+
+		if ( payload_len > len && fragment_finished == 0 ) {
+				list_add_tail ( &iobuf->list, &tls->handshake_fragments );
+				tls->handshake_fragment_remaining = payload_len - frag_len;
+				return 0;
+		}
 
 		/* Parse header */
 		if ( sizeof ( *handshake ) > remaining ) {
@@ -2009,13 +2042,7 @@ static int tls_new_handshake ( struct tls_connection *tls,
 			DBGC_HD ( tls, data, remaining );
 			return -EINVAL_HANDSHAKE;
 		}
-		payload_len = tls_uint24 ( &handshake->length );
-		if ( payload_len > ( remaining - sizeof ( *handshake ) ) ) {
-			DBGC ( tls, "TLS %p received overlength Handshake\n",
-			       tls );
-			DBGC_HD ( tls, data, len );
-			return -EINVAL_HANDSHAKE;
-		}
+
 		payload = &handshake->payload;
 		record_len = ( sizeof ( *handshake ) + payload_len );
 
@@ -2057,17 +2084,22 @@ static int tls_new_handshake ( struct tls_connection *tls,
 		 * which are explicitly excluded).
 		 */
 		if ( handshake->type != TLS_HELLO_REQUEST )
-			tls_add_handshake ( tls, data, record_len );
+			tls_add_handshake ( tls, iobuf->data, record_len );
 
 		/* Abort on failure */
 		if ( rc != 0 )
 			return rc;
 
 		/* Move to next handshake record */
-		data += record_len;
+		iobuf->data += record_len;
 		remaining -= record_len;
 	}
 
+	if ( tls->handshake_fragment_remaining == 0 )
+	{
+		free_iob ( iobuf );
+	}
+
 	return 0;
 }
 
@@ -3116,6 +3148,7 @@ int add_tls ( struct interface *xfer, const char *name,
 	iob_populate ( &tls->rx_header_iobuf, &tls->rx_header, 0,
 		       sizeof ( tls->rx_header ) );
 	INIT_LIST_HEAD ( &tls->rx_data );
+	INIT_LIST_HEAD ( &tls->handshake_fragments );
 	if ( ( rc = tls_generate_random ( tls, &tls->client_random.random,
 			  ( sizeof ( tls->client_random.random ) ) ) ) != 0 ) {
 		goto err_random;
