From a4642506acc403dc7aac9a51c5ce37cec5e378f9 Mon Sep 17 00:00:00 2001
From: Alexander Edland <s@ocv.me>
Date: Sat, 26 Mar 2022 15:14:19 +0100
Subject: [PATCH 1/2] [rng] Add more entropy

---
 src/core/random.c | 19 +++++++++++++++----
 1 file changed, 15 insertions(+), 4 deletions(-)

diff --git a/src/core/random.c b/src/core/random.c
index 975a03cf58..45a014f45d 100644
--- a/src/core/random.c
+++ b/src/core/random.c
@@ -8,6 +8,7 @@ FILE_LICENCE ( GPL2_OR_LATER_OR_UBDL );
 
 #include <stdlib.h>
 #include <ipxe/timer.h>
+#include <ipxe/profile.h>
 
 static int32_t rnd_seed = 0;
 
@@ -15,11 +16,21 @@ static int32_t rnd_seed = 0;
  * Seed the pseudo-random number generator
  *
  * @v seed		Seed value
+ *
+ * Will use the following entropy sources if @c seed is 0:
+ *  - system time ticks
+ *  - cpu profiling timestamp
+ *  - address of stack variable
+ *  - fair dice roll (ensures nonzero seed)
  */
 void srandom ( unsigned int seed ) {
-	rnd_seed = seed;
-	if ( ! rnd_seed )
-		rnd_seed = 4; /* Chosen by fair dice roll */
+	if ( ! ( rnd_seed = seed ) ) {
+		rnd_seed = ( currticks()
+			^ profile_timestamp()
+			^ ( size_t ) &seed
+		) | 4;
+	}
+	DBG ( "seed=%08x ", rnd_seed );
 }
 
 /**
@@ -31,7 +42,7 @@ long int random ( void ) {
 	int32_t q;
 
 	if ( ! rnd_seed ) /* Initialize linear congruential generator */
-		srandom ( currticks() );
+		srandom ( 0 );
 
 	/* simplified version of the LCG given in Bruce Schneier's
 	   "Applied Cryptography" */

From 8a68733d5fae491729170a4b16bd0f47a293f145 Mon Sep 17 00:00:00 2001
From: Alexander Edland <s@ocv.me>
Date: Sat, 26 Mar 2022 18:30:31 +0100
Subject: [PATCH 2/2] [rng] Improve comments

---
 src/core/random.c | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/src/core/random.c b/src/core/random.c
index 45a014f45d..62eb18d995 100644
--- a/src/core/random.c
+++ b/src/core/random.c
@@ -21,14 +21,16 @@ static int32_t rnd_seed = 0;
  *  - system time ticks
  *  - cpu profiling timestamp
  *  - address of stack variable
- *  - fair dice roll (ensures nonzero seed)
+ *
+ * The RNG implementation requires that the seed is non-zero;
+ * this function guarantees that with `| 4`
  */
 void srandom ( unsigned int seed ) {
 	if ( ! ( rnd_seed = seed ) ) {
 		rnd_seed = ( currticks()
 			^ profile_timestamp()
 			^ ( size_t ) &seed
-		) | 4;
+		) | 4; /* Chosen by fair dice roll */
 	}
 	DBG ( "seed=%08x ", rnd_seed );
 }
@@ -41,7 +43,9 @@ void srandom ( unsigned int seed ) {
 long int random ( void ) {
 	int32_t q;
 
-	if ( ! rnd_seed ) /* Initialize linear congruential generator */
+	if ( ! rnd_seed )
+		/* Initialize linear congruential generator,
+		   providing 0 to autoselect a seed */
 		srandom ( 0 );
 
 	/* simplified version of the LCG given in Bruce Schneier's
